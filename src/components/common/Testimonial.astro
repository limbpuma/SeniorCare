---
interface Props {
    testimonials: Testimonial[];
}

interface Testimonial {
    name: string;
    title: string;
    image: string;
    desc: string;
}

const { testimonials } = Astro.props;
---

<section class="py-16 bg-gray-100">
  <div class="container mx-auto px-4">
    <div class="text-center mb-12">
      <p class="text-primary font-semibold mb-2">Testimonials</p>
      <h2 class="text-4xl font-bold text-primary-dark">What Our Clients Say About</h2>
    </div>

    <div class="relative max-w-7xl mx-auto">
      <div id="testimonialSlider" class="overflow-hidden">
        <div id="testimonialWrapper" class="flex transition-transform duration-300 ease-in-out">
          {testimonials.map((testimonial, index) => (
            <div class="flex-shrink-0 w-full sm:w-1/2 lg:w-1/3 px-4">
              <div class="bg-white border-soft-orange p-6 rounded-lg shadow-md border  h-full">
                <p class="text-lg italic text-gray-700 mb-4">{testimonial.desc}</p>
                <div class="flex items-center justify-between mt-auto">
                  <div class="w-[60%]">
                    <h3 class="font-bold text-xl text-primary-dark">{testimonial.name}</h3>
                    <p class="text-sm text-gray-600">{testimonial.title}</p>
                  </div>
                  <div class="w-[40%]">
                    <div class="img-container relative size-[100px] sm:size-[120px] lg:size-[140px] border-none rounded-full bg-slate-200">
                      <i class="fa-solid fa-quote-right text-ag-h3 text-deep-blue absolute top-[5px] sm:top-[10px] left-[-5px] sm:left-[-10px] z-10"></i>
                      <img
                        src={testimonial.image}
                        alt={testimonial.name}
                        class="object-cover w-full h-full rounded-full overflow-hidden"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <button id="prevButton" class="absolute top-1/2 -left-4 transform -translate-y-1/2 bg-white rounded-full p-2 shadow-md hover:bg-gray-100 transition-colors duration-200 z-10">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      <button id="nextButton" class="absolute top-1/2 -right-4 transform -translate-y-1/2 bg-white rounded-full p-2 shadow-md hover:bg-gray-100 transition-colors duration-200 z-10">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>

    <div id="dotIndicators" class="flex justify-center mt-8">
      {testimonials.map((_, index) => (
        <span class={`w-3 h-3 rounded-full mx-1 ${index === 0 ? 'bg-primary' : 'bg-gray-300'}`}></span>
      ))}
    </div>
  </div>
</section>

<script>
  const slider = document.getElementById('testimonialSlider');
  const wrapper = document.getElementById('testimonialWrapper');
  const prevButton = document.getElementById('prevButton');
  const nextButton = document.getElementById('nextButton');
  const dotIndicators = document.getElementById('dotIndicators');
  const slides = wrapper.children;
  let currentIndex = 0;

  function updateSlider() {
    const slidesPerView = getSlidesPerView();
    const slideWidth = 100 / slidesPerView;
    const maxIndex = slides.length - slidesPerView;

    if (currentIndex > maxIndex) {
      currentIndex = 0;
    } else if (currentIndex < 0) {
      currentIndex = maxIndex;
    }

    wrapper.style.transform = `translateX(-${currentIndex * slideWidth}%)`;
    updateDots();
  }

  function updateDots() {
    const dots = dotIndicators.children;
    const slidesPerView = getSlidesPerView();
    const totalGroups = Math.ceil(slides.length / slidesPerView);
    const currentGroup = Math.floor(currentIndex / slidesPerView);

    for (let i = 0; i < dots.length; i++) {
      if (i === currentGroup) {
        dots[i].classList.remove('bg-gray-300');
        dots[i].classList.add('bg-primary');
      } else {
        dots[i].classList.remove('bg-primary');
        dots[i].classList.add('bg-gray-300');
      }
    }


    for (let i = totalGroups; i < dots.length; i++) {
      dots[i].classList.add('hidden');
    }
  }

  function getSlidesPerView() {
    if (window.innerWidth >= 1024) return 3;
    if (window.innerWidth >= 640) return 2;
    return 1;
  }

  function updateDotCount() {
    const slidesPerView = getSlidesPerView();
    const totalGroups = Math.ceil(slides.length / slidesPerView);


    while (dotIndicators.firstChild) {
      dotIndicators.removeChild(dotIndicators.firstChild);
    }


    for (let i = 0; i < totalGroups; i++) {
      const dot = document.createElement('span');
      dot.className = `w-3 h-3 rounded-full mx-1 ${i === 0 ? 'bg-primary' : 'bg-gray-300'}`;
      dotIndicators.appendChild(dot);
    }
  }

  prevButton.addEventListener('click', () => {
    currentIndex -= getSlidesPerView();
    updateSlider();
  });

  nextButton.addEventListener('click', () => {
    currentIndex += getSlidesPerView();
    updateSlider();
  });

  window.addEventListener('resize', () => {
    updateDotCount();
    updateSlider();
  });


  setInterval(() => {
    currentIndex += getSlidesPerView();
    updateSlider();
  }, 5000);


  updateDotCount();
  updateSlider();
</script>
