---
import Button from "./Button.astro";


type FormSize = "large" | "medium" | "small";

interface Props {
  class?: string;
  title: string;
  inputFields: {
    type: string;  
    placeholder: string;
  }[];
  selectOptions: string[];
  textareaPlaceholder: string;
  buttonText: string;
  size?: FormSize;
  image?: string;
}

const { 
  class: className, 
  title, 
  inputFields, 
  selectOptions, 
  textareaPlaceholder, 
  buttonText,
  size = "large",
  image
} = Astro.props;

const sizeClasses = {
  large: "max-w-[400px] sm:max-w-[450px] md:max-w-[500px] px-6 sm:px-8 md:px-10 py-10 sm:py-12 md:py-14",
  medium: "max-w-[300px] sm:max-w-[350px] md:max-w-[400px] px-4 sm:px-5 md:px-6 py-6 sm:py-8 md:py-10",
  small: "max-w-[250px] sm:max-w-[300px] md:max-w-[350px] px-3 sm:px-4 md:px-5 py-4 sm:py-6 md:py-8"
};

const titleClasses = {
  large: "text-2xl sm:text-3xl md:text-ag-h4 mb-6 sm:mb-8",
  medium: "text-lg sm:text-xl md:text-2xl mb-4 sm:mb-5",
  small: "text-base sm:text-lg md:text-xl mb-2 sm:mb-3"
};

const spacingClasses = {
  large: "space-y-4 sm:space-y-5 md:space-y-6",
  medium: "space-y-2 sm:space-y-3 md:space-y-4",
  small: size === "small" && image ? "space-y-1" : "space-y-1 sm:space-y-2 md:space-y-3"
};

const buttonClasses = {
  large: "mt-6 sm:mt-8 md:mt-10",
  medium: "mt-4 sm:mt-5 md:mt-6",
  small: size === "small" && image ? "mt-2" : "mt-3 sm:mt-4 md:mt-5"
};

const inputClasses =
  "w-full px-4 py-2 bg-inherit border-t-0 border-x-0 border-b border-primary text-primary-dark focus:outline-none";

const getTextareaRows = () => {
  if (size === "small" && image) return "2";
  if (size === "small") return "3";
  if (size === "medium") return "4";
  return "6";
};
---
<div class="relative">
<form
  id="contact-form"
  class={`bg-soft-orange mx-auto flex flex-col justify-between shadow-lg ${sizeClasses[size]} ${className}`}
>
  {size === "small" && image && (
    <div class="w-full h-24 overflow-hidden mb-2">
      <img src={image} alt="Form header" class="w-full h-full object-cover" />
    </div>
  )}
  <h2 class={`font-ag-h4 text-primary text-center ${titleClasses[size]}`} set:html={title} />
  <div class={spacingClasses[size]}>
    {
      inputFields.map((input) => {
      const { type, placeholder } = input;
      let name = type;
      if (type === 'tel') name = 'phone';
      if (type === 'text' && placeholder.toLowerCase().includes('name')) name = 'name';
      return <input type={type as astroHTML.JSX.HTMLInputTypeAttribute} name={name} placeholder={placeholder} class={inputClasses} required />;
    })
    }
    <select name="subject" class={inputClasses} required>
      {selectOptions.map((option) => (
        <option>{option}</option>
      ))}
    </select>
    <textarea name="message" placeholder={textareaPlaceholder} rows={getTextareaRows()} class={inputClasses} required></textarea>
  </div>
  <Button type="submit" variant="primary" fullWidth class={buttonClasses[size]}>{buttonText}</Button>
  <div id="success-message" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-md w-full mx-4">
      <h3 class="text-ag-h3 font-bold text-primary mb-2">Nachricht gesendet!</h3>
      <p class="text-ag-body-text text-primary-dark mb-4">Vielen Dank für Ihre Kontaktaufnahme. Wir werden uns bald bei Ihnen melden.</p>
      <button id="close-success" class="w-full px-4 py-2 bg-deep-blue hover:bg-soft-blue text-white rounded-full transition-colors duration-300 focus:outline-none font-ag-button-text text-ag-button-text">Schließen</button>
    </div>
  </div>
</form>
</div>
<style>
  *:focus {
    box-shadow: none;
  }
</style>

<script>
  const form = document.getElementById('contact-form') as HTMLFormElement;
  const successMessage = document.getElementById('success-message') as HTMLDivElement;
  const closeSuccessButton = document.getElementById('close-success') as HTMLButtonElement;
  
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    
    try {
      const response = await fetch('/api/send-email', {
        method: 'POST',
        body: formData,
      });
      
      const result = await response.json();
      
      if (result.success) {
        successMessage.classList.remove('hidden');
        form.reset();
      } else {
        alert('Error sending message: ' + result.error);
      }
    } catch (error) {
      alert('An unexpected error occurred. Please try again later.');
    }
  });

  closeSuccessButton.addEventListener('click', () => {
    successMessage.classList.add('hidden');
  });
</script>